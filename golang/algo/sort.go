package main

import (
	"fmt"
	"math/rand"
	"time"
)

func main() {
	rand.Seed(time.Now().Unix())

	for i := 0; i < 1; i++ {
		start()
	}
}

func start() {
	var a1 []int = make([]int, 100)

	for i := 0; i < 100; i++ {
		item := rand.Int31n(100)

		a1[i] = int(item)
		// fmt.Print(item, ",")
	}

	// a1 := []int{281, 398, 604, 640, 496, 183, 795, 323, 170, 943, 418, 659, 228, 385, 963, 31, 217, 20, 125, 957, 468, 957, 827, 610, 511, 728, 844, 587, 730, 963, 102, 997, 932, 786, 731, 116, 804, 660, 592, 100, 318, 386, 222, 797, 380, 157, 570, 235, 510, 979, 988, 696, 910, 821, 128, 614, 332, 743, 980, 765, 817, 915, 466, 88, 13, 694, 894, 809, 282, 374, 959, 818, 967, 409, 60, 782, 256, 702, 336, 723, 844, 857, 341, 221, 412, 980, 144, 911, 443, 496, 272, 205, 654, 935, 497, 263, 328, 706, 924, 113, 770, 337, 811, 639, 359, 999, 943, 986, 234, 480, 488, 246, 114, 306, 947, 894, 822, 415, 830, 338, 478, 591, 301, 271, 435, 7, 526, 999, 606, 804, 767, 748, 940, 227, 687, 856, 721, 629, 24, 460, 74, 492, 777, 136, 190, 587, 4, 161, 865, 108, 704, 216, 752, 451, 703, 192, 90, 275, 427, 140, 655, 880, 264, 272, 594, 230, 589, 338, 842, 495, 773, 413, 702, 228, 433, 509, 946, 974, 21, 555, 786, 745, 826, 60, 633, 858, 942, 331, 658, 290, 619, 742, 658, 548, 101, 889, 35, 470, 375, 936, 58, 281, 905, 441, 774, 756, 411, 643, 300, 57, 40, 946, 160, 610, 146, 364, 699, 59, 128, 220, 382, 13, 172, 418, 301, 871, 609, 434, 909, 234, 83, 323, 380, 649, 766, 895, 8, 504, 603, 345, 342, 355, 502, 12, 821, 574, 751, 897, 452, 898, 639, 260, 343, 951, 826, 734, 145, 708, 424, 997, 210, 759, 359, 450, 833, 655, 399, 686, 195, 898, 518, 588, 849, 656, 133, 566, 599, 759, 696, 591, 93, 38, 162, 927, 697, 180, 481, 284, 207, 400, 880, 530, 928, 977, 575, 139, 450, 57, 847, 386, 623, 253, 679, 213, 719, 829, 248, 55, 969, 299, 700, 205, 963, 336, 441, 816, 796, 469, 302, 986, 335, 682, 609, 328, 534, 294, 131, 116, 945, 812, 47, 838, 456, 315, 335, 241, 247, 702, 494, 910, 429, 764, 147, 248, 825, 294, 625, 559, 732, 62, 323, 877, 197, 521, 945, 893, 995, 663, 176, 685, 962, 988, 575, 362, 197, 731, 947, 861, 222, 951, 290, 705, 241, 967, 779, 930, 514, 216, 750, 552, 278, 71, 340, 636, 59, 613, 861, 945, 428, 276, 815, 366, 377, 721, 681, 703, 676, 666, 161, 296, 6, 392, 785, 464, 942, 939, 929, 207, 408, 714, 684, 123, 409, 883, 938, 678, 965, 532, 269, 45, 283, 582, 706, 16, 455, 958, 910, 124, 785, 897, 470, 440, 557, 47, 10, 853, 760, 881, 141, 468, 598, 979, 514, 195, 633, 129, 201, 194, 172, 749, 876, 699, 613, 922, 507, 440, 164, 737, 20, 291, 49, 874, 418, 366, 702, 731, 930, 431, 182, 541, 173, 876, 621, 948, 692, 212, 866, 988, 535, 958, 370, 221, 169, 420, 757, 149, 49, 630, 937, 304, 141, 293, 875, 23, 325, 266, 729, 510, 362, 691, 719, 679, 455, 392, 978, 86, 377, 929, 813, 342, 92, 110, 390, 507, 93, 462, 238, 910, 236, 911, 122, 731, 724, 791, 38, 175, 246, 909, 860, 20, 202, 796, 699, 648, 568, 776, 178, 950, 80, 726, 793, 720, 502, 565, 921, 905, 138, 268, 806, 159, 521, 126, 298, 81, 850, 223, 967, 397, 703, 61, 456, 543, 331, 203, 521, 467, 396, 967, 194, 807, 430, 90, 151, 604, 861, 379, 122, 551, 524, 213, 513, 295, 399, 360, 476, 264, 871, 900, 584, 537, 346, 191, 547, 168, 939, 154, 225, 184, 151, 2, 842, 778, 780, 737, 865, 505, 113, 617, 992, 204, 342, 342, 445, 577, 88, 670, 191, 595, 306, 854, 297, 48, 445, 893, 250, 322, 479, 765, 851, 822, 626, 688, 766, 807, 927, 306, 678, 652, 729, 232, 999, 954, 420, 447, 366, 834, 420, 450, 317, 88, 365, 131, 709, 849, 658, 203, 968, 399, 309, 772, 767, 909, 890, 500, 461, 357, 487, 850, 971, 494, 107, 174, 343, 253, 554, 68, 190, 901, 110, 248, 616, 468, 849, 292, 826, 98, 958, 783, 887, 306, 106, 34, 26, 779, 845, 502, 512, 80, 164, 564, 60, 283, 512, 799, 499, 834, 513, 781, 542, 924, 521, 852, 468, 893, 317, 100, 28, 122, 376, 316, 852, 120, 995, 50, 114, 443, 612, 338, 384, 465, 9, 808, 651, 576, 873, 25, 171, 822, 480, 222, 11, 870, 398, 895, 505, 997, 409, 766, 57, 996, 477, 726, 546, 727, 734, 386, 528, 814, 366, 153, 434, 640, 848, 231, 568, 654, 515, 981, 146, 993, 135, 956, 922, 309, 369, 650, 888, 104, 851, 80, 510, 599, 851, 38, 436, 412, 62, 232, 560, 417, 323, 870, 122, 416, 63, 734, 433, 9, 270, 905, 810, 961, 262, 237, 266, 74, 936, 978, 58, 84, 743, 854, 835, 205, 716, 154, 622, 962, 203, 650, 231, 305, 875, 573, 185, 426, 654, 585, 589, 139, 168, 356, 285, 66, 330, 593, 437, 604, 790, 777, 617, 961, 703, 438, 946, 754, 950, 204, 87, 624, 564, 345, 140, 616, 192, 852, 259, 115, 524, 215, 203, 411, 624, 491, 251, 324, 166, 150, 265, 937, 635, 985, 10, 242, 464, 975, 636, 383, 93, 314, 625, 126, 770, 294, 102, 142, 520, 181, 708, 706, 522, 3, 386, 130, 684, 5, 294, 131, 205, 407, 743, 426, 313, 76, 745, 613, 193, 551, 911, 709, 865, 800, 413, 599, 10, 741, 98, 418, 391, 383, 787, 110, 256, 161, 952, 11, 835, 993, 885, 578, 728, 844, 418, 898, 377, 187, 312, 861, 547, 296, 165, 306, 88, 707, 876, 837, 516, 984, 833, 690, 502, 935, 543, 241, 28, 934, 706, 502, 976, 156, 656, 185, 552, 453, 49, 203, 817, 807, 490, 88, 794, 714, 296, 359, 496, 734, 103, 789, 540, 754, 100, 674, 855, 387, 420, 218, 446, 596, 172, 721, 111, 435, 929, 66, 65, 776, 327, 929, 161, 990}
	fmt.Println(a1)
	bubbleNums := make([]int, len(a1))
	copy(bubbleNums, a1)
	fmt.Println(BubbleSort(bubbleNums))

	SelectionNums := make([]int, len(a1))
	copy(SelectionNums, a1)
	fmt.Println((SelectionSort(SelectionNums)))

	InsertionNums := make([]int, len(a1))
	copy(InsertionNums, a1)
	fmt.Println((InsertionSort(InsertionNums)))

	ShellNums := make([]int, len(a1))
	copy(ShellNums, a1)
	fmt.Println((ShellSort(ShellNums)))
}

// BubbleSort BubbleSort
// if n(i)>n(i+1) n(i+1)=n(i) n(i)=n(i+1)
// o(n)~o(n^2)
func BubbleSort(nums []int) []int {
	o := 0
	numsLen := len(nums)
	for i := 0; i < numsLen; i++ {
		allCompareOK := true
		for j := 0; j < numsLen-1; j++ {

			o++
			if nums[j] > nums[j+1] {
				tmpJ := nums[j]
				nums[j] = nums[j+1]
				nums[j+1] = tmpJ

				allCompareOK = false
			}
		}
		if allCompareOK {
			fmt.Println("bubble sort o:", o, i)
			//fmt.Println("ok:", i)
			return nums
		}
	}
	fmt.Println("bubble sort o:", o)
	return nums
}

// SelectionSort SelectionSort
// pos i,find min in i...n,change pos(i) pos(min)
// o(n^)
func SelectionSort(nums []int) []int {
	o := 0
	numsLen := len(nums)
	for i := 0; i < numsLen; i++ {
		minNum := nums[i]
		minPos := i
		for j := i + 1; j < numsLen; j++ {

			o++
			if minNum > nums[j] {
				minNum = nums[j]
				minPos = j
			}
		}
		nums[minPos] = nums[i]
		nums[i] = minNum
	}
	fmt.Println("selection sort o:", o)
	return nums
}

// InsertionSort InsertionSort
func InsertionSort(nums []int) []int {

	o := 0
	numsLen := len(nums)
	for i := 0; i < numsLen; i++ {
		for j := i; j > 0; j-- {

			o++

			if nums[j] < nums[j-1] {
				tmp := nums[j-1]
				nums[j-1] = nums[j]
				nums[j] = tmp
			} else {
				break
			}
		}
	}

	fmt.Println("insert sort o:", o)
	return nums
}

// ShellSort ShellSort
func ShellSort(nums []int) []int {

	o := 0

	numsLen := len(nums)

	// 1.6k
	kList := []int{8, 5, 1}
	for _, k := range kList {
		for i := 0; i < numsLen; i++ {
			for j := i; j > 0; j -= k {
				o++

				if j-k < 0 {
					break
				}

				if nums[j] < nums[j-k] {
					tmp := nums[j-k]
					nums[j-k] = nums[j]
					nums[j] = tmp
				} else {
					break
				}
			}
		}
	}

	fmt.Println("o:", o)

	return nums
}

//MergeSort MergeSort
func MergeSort(nums []int) {

}

// QuickSort QuickSort
func QuickSort(nums []int) []int {

	numsLen := len(nums)

	if numsLen < 2 {
		return nums
	}

	midNum := nums[numsLen/2]

	for i := 0; i < numsLen; i++ {
		if nums[i]<
	}

}
